[{"/Users/itsupport/Documents/projects/react-web/my-app/src/index.js":"1","/Users/itsupport/Documents/projects/react-web/my-app/src/reportWebVitals.js":"2","/Users/itsupport/Documents/projects/react-web/my-app/src/helper.js":"3"},{"size":8930,"mtime":1612508205280,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1609516127717,"results":"6","hashOfConfig":"5"},{"size":526,"mtime":1612488496716,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10","usedDeprecatedRules":"11"},"173m6uj",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"/Users/itsupport/Documents/projects/react-web/my-app/src/index.js",["18"],"import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  Editor, EditorState, RichUtils,\n  CharacterMetadata, ContentBlock,\n  genKey, ContentState, convertFromHTML\n} from 'draft-js';\nimport './index.css';\nimport { Repeat, List } from 'immutable';\nimport { convertToHTML } from 'draft-convert';\nimport {\n  getContentStateUsingDraftConvertLib,\n  convertFromHTMLUsingDraftConvertLib,\n  convertContentStateToHTMLUsingDraftConvertLib\n} from './helper';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.editorRef = React.createRef()\n    this.state = {\n      editorState: EditorState.createEmpty(),\n      placeholder: ''\n    }\n  }\n\n  scrollToBottom = () => {\n\n    let maxOffSet = 0\n    let elements = document.querySelectorAll('*');\n    let className = ''\n\n    let parent = undefined\n    let container = undefined\n    let child = undefined\n\n    for (let i = 0; i < elements.length; i++) {\n      let item = elements[i]\n      if (item.className === \"DraftEditor-root\") {\n        parent = item\n      }\n      if (item.className === \"public-DraftStyleDefault-ul\" ||\n        item.className === \"DraftEditor-editorContainer\") {\n        container = item\n      }\n\n      if (item.offsetTop > maxOffSet) {\n        maxOffSet = item.offsetTop\n        className = item.className\n        child = item\n      }\n      // console.log(item.className + \" : \" + item.offsetTop);\n    }\n    console.log(\"maxOffSet : \" + maxOffSet);\n    console.log(parent.className + \" : \" + parent.offsetTop);\n    console.log(container.className + \" : \" + container.offsetTop);\n    console.log(child.className + \" : \" + child.offsetTop);\n\n    child.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  setPlaceHolder = (placeholder) => {\n    this.setState({ placeholder: placeholder })\n  }\n\n  onChange = (editorState) => {\n    // console.log(\"onChangeCalled\");\n    let contentState = editorState.getCurrentContent()\n\n    let text = convertContentStateToHTMLUsingDraftConvertLib(contentState)\n    let inlineStyle = editorState.getCurrentInlineStyle()\n    let blockType = contentState.getBlockForKey(editorState.getSelection().getAnchorKey()).getType()\n\n    this.setState({ editorState }, () => {\n      window.ReactNativeWebView && window.ReactNativeWebView.postMessage(JSON.stringify({\n        action: 'GET_TEXT',\n        text: text,\n        inlineStyle: inlineStyle,\n        blockType: blockType\n      }));\n    });\n  };\n\n  insertTextInNewLine(text) {\n    this.moveSelectionToEnd()\n    const editorState = this.state.editorState;\n    let contentState = getContentStateUsingDraftConvertLib(editorState, text)\n    let newEditorState = EditorState.createWithContent(contentState)\n    console.log(\"newEditorState : \" + JSON.stringify(newEditorState));\n    this.setState({ editorState: newEditorState }, () => {\n      this.onChange(this.state.editorState)\n    });\n  }\n\n  getText(editorState) {\n\n    const inlineStyle = editorState.getCurrentInlineStyle();\n\n    const selectionState = editorState.getSelection();\n    const key = selectionState.getAnchorKey();\n\n    let blockType = editorState.getCurrentContent().getBlockForKey(key).getType()\n    let html = convertToHTML(editorState.getCurrentContent());\n\n    window.ReactNativeWebView && window.ReactNativeWebView.postMessage(JSON.stringify({\n      action: 'GET_TEXT',\n      text: html,\n      editorState: editorState,\n      inlineStyle: inlineStyle,\n      blockType: blockType\n    }));\n  }\n\n  setHtml = (html) => {\n    const blocksFromHTML = convertFromHTMLUsingDraftConvertLib(html)\n    // const content = ContentState.createFromBlockArray(blocksFromHTML)\n    this.setState({\n      editorState: EditorState.createWithContent(blocksFromHTML)\n    }, () => {\n      this.moveSelectionToEnd()\n    })\n  }\n\n  //accepts input as = [\"hello\",\"how\",\"are\",\"you\"]\n  addBulletList = (input) => {\n    let contentBlocksArray = input.map(word => {\n      return new ContentBlock({\n        key: genKey(),\n        type: 'unordered-list-item',\n        characterList: new List(Repeat(CharacterMetadata.create(), word.length)),\n        text: word\n      });\n    });\n    this.setState({\n      editorState: EditorState.createWithContent(ContentState.createFromBlockArray(contentBlocksArray))\n    }, () => {\n      this.moveSelectionToEnd()\n    });\n  }\n\n  // accepts input as = [\"hello\",\"how\",\"are\",\"you\"]\n  addList = (input) => {\n    let contentBlocksArray = input.map(word => {\n      return new ContentBlock({\n        key: genKey(),\n        type: 'unstyled',\n        characterList: new List(Repeat(CharacterMetadata.create(), word.length)),\n        text: word\n      });\n    });\n    this.setState({\n      editorState: EditorState.createWithContent(ContentState.createFromBlockArray(contentBlocksArray))\n    }, () => {\n      this.moveSelectionToEnd()\n    });\n  }\n\n  // accepts input as = \"<li>hello</li>\"\n  addBullet(bulletsHTML) {\n    this.moveSelectionToEnd()\n    const editorState = this.state.editorState;\n    const newBlockMap = convertFromHTML(bulletsHTML);\n    const contentState = editorState.getCurrentContent();\n    const selectionState = editorState.getSelection();\n    const key = selectionState.getAnchorKey();\n\n    const blocksAfter = contentState.getBlockMap().skipUntil(function (_, k) {\n      return k === key;\n    }).skip(1).toArray();\n    const blocksBefore = contentState.getBlockMap().takeUntil(function (_, k) {\n      return k === key;\n    }).toArray();\n\n    // contentState.hasText() ?\n\n    newBlockMap.contentBlocks =\n      blocksBefore\n        .concat(contentState.hasText() ? [contentState.getBlockForKey(key)] : [])\n        .concat(newBlockMap.contentBlocks)\n        .concat(blocksAfter);\n\n    const newContentState =\n      ContentState.createFromBlockArray(newBlockMap, newBlockMap.entityMap);\n    const newEditorState = EditorState.createWithContent(newContentState);\n    // console.log(\"newEditorState : \" + JSON.stringify(newEditorState));\n    this.setState({ editorState: newEditorState }, () => {\n      this.onChange(this.state.editorState)\n    });\n  }\n\n  handleKeyCommand = (command) => {\n    const newState = RichUtils.handleKeyCommand(this.state.editorState, command);\n\n    if (newState) {\n      this.onChange(newState);\n      return 'handled';\n    }\n\n    return 'not-handled';\n  }\n\n  getEditorState = () => {\n    return this.state.editorState\n  }\n\n  onUnderlineClick = () => {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'UNDERLINE'));\n    window.ReactNativeWebView && window.ReactNativeWebView.postMessage(JSON.stringify({ action: 'UNDERLINE' }));\n  }\n\n  onBoldClick = () => {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, \"BOLD\"));\n    window.ReactNativeWebView && window.ReactNativeWebView.postMessage(JSON.stringify({ action: 'BOLD' }));\n  };\n\n  onItalicClick = () => {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, \"ITALIC\"));\n    window.ReactNativeWebView && window.ReactNativeWebView.postMessage(JSON.stringify({ action: 'ITALIC' }));\n  };\n\n  toggleBulletPoints = () => {\n    this.onChange(RichUtils.toggleBlockType(this.state.editorState, 'unordered-list-item'))\n    window.ReactNativeWebView && window.ReactNativeWebView.postMessage(JSON.stringify({ action: 'unordered-list-item' }));\n  }\n\n  handlePastedText = () => {\n    window.ReactNativeWebView && window.ReactNativeWebView.postMessage(JSON.stringify({ action: 'handlePastedText' }));\n  }\n\n  onBlur = () => {\n    document.activeElement.blur();\n    window.ReactNativeWebView && window.ReactNativeWebView.postMessage(JSON.stringify({ action: 'onBlur' }));\n  }\n\n  onFocus = () => {\n    window.ReactNativeWebView && window.ReactNativeWebView.postMessage(JSON.stringify({ action: 'onFocus', isEmpty: this.shouldHidePlaceholder() }));\n  }\n\n  moveSelectionToEnd = () => {\n    this.setState({\n      editorState: EditorState.moveSelectionToEnd(this.state.editorState),\n    });\n  }\n\n  focusManually = () => {\n    this.editorRef.current.focus()\n  }\n\n  shouldHidePlaceholder = () => {\n    const contentState = this.state.editorState.getCurrentContent();\n    return (\n      contentState.hasText() ||\n      contentState\n        .getBlockMap()\n        .first()\n        .getType() !== 'unstyled'\n    );\n  }\n\n  render() {\n    return (\n      <div onClick={this.focusManually}>\n        <div\n          style={{ paddingLeft: 16, paddingRight: 16 }}>\n          <Editor\n            ref={this.editorRef}\n            onBlur={this.onBlur}\n            onFocus={this.onFocus}\n            editorState={this.state.editorState}\n            handleKeyCommand={this.handleKeyCommand}\n            onChange={this.onChange}\n            handlePastedText={() => { this.handlePastedText() }}\n            placeholder={this.shouldHidePlaceholder() ? undefined : this.state.placeholder}\n          />\n        </div >\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <App ref={(appComponent) => { window.appComponent = appComponent }} />,\n  document.getElementById('root')\n);\n",["19","20"],"/Users/itsupport/Documents/projects/react-web/my-app/src/reportWebVitals.js",[],["21","22"],"/Users/itsupport/Documents/projects/react-web/my-app/src/helper.js",[],["23","24"],{"ruleId":"25","severity":1,"message":"26","line":50,"column":9,"nodeType":"27","messageId":"28","endLine":50,"endColumn":18},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"29","replacedBy":"33"},{"ruleId":"31","replacedBy":"34"},{"ruleId":"29","replacedBy":"35"},{"ruleId":"31","replacedBy":"36"},"no-unused-vars","'className' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["37"],"no-negated-in-lhs",["38"],["37"],["38"],["37"],["38"],"no-global-assign","no-unsafe-negation"]