[{"/Users/itsupport/Documents/projects/react-web/my-app/src/index.js":"1","/Users/itsupport/Documents/projects/react-web/my-app/src/reportWebVitals.js":"2"},{"size":6532,"mtime":1610013590291,"results":"3","hashOfConfig":"4"},{"size":362,"mtime":1609516127717,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"173m6uj",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"/Users/itsupport/Documents/projects/react-web/my-app/src/index.js",["12","13"],"import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  Editor, EditorState, RichUtils,\n  CharacterMetadata, ContentBlock,\n  genKey, ContentState, convertFromHTML, convertToRaw, SelectionState\n} from 'draft-js';\nimport './index.css';\nimport { Repeat, List } from 'immutable';\nimport { stateToHTML } from 'draft-js-export-html';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.editorRef = React.createRef()\n    this.state = {\n      editorState: EditorState.createEmpty(),\n      placeholder: ''\n    }\n  }\n\n  setPlaceHolder = (placeholder) => {\n    this.setState({ placeholder: placeholder })\n  }\n\n  onChange = (editorState) => {\n    console.log(JSON.stringify(this.state.editorState));\n    this.setState({ editorState }, () => {\n      this.getText()\n    });\n  };\n\n  componentDidMount() {\n    this.addBulletList([\"fsdf\", \"sdfdsfsd\", \"sdfdsf\"])\n    // setTimeout(() => { this.addBullet(\"<li>hello</li>\") }, 4000)\n    // setTimeout(() => {\n    //   this.toggleBulletPoints()\n    // }, 2000)\n  }\n\n  getText = () => {\n\n    const { editorState } = this.state;\n    const inlineStyle = editorState.getCurrentInlineStyle();\n\n    const selectionState = editorState.getSelection();\n    const key = selectionState.getAnchorKey();\n\n    let blockType = editorState.getCurrentContent().getBlockForKey(key).getType()\n    let html = stateToHTML(editorState.getCurrentContent());\n\n    window.ReactNativeWebView && window.ReactNativeWebView.postMessage(JSON.stringify({\n      action: 'GET_TEXT',\n      text: html,\n      editorState: editorState,\n      inlineStyle: inlineStyle,\n      blockType: blockType\n    }));\n  }\n\n  setHtml = (html) => {\n    const blocksFromHTML = convertFromHTML(html)\n    const content = ContentState.createFromBlockArray(blocksFromHTML)\n    this.setState({\n      editorState: EditorState.createWithContent(content)\n    }, () => {\n      this.moveSelectionToEnd()\n    })\n  }\n\n  //accepts input as = [\"hello\",\"how\",\"are\",\"you\"]\n  addBulletList = (input) => {\n    let contentBlocksArray = input.map(word => {\n      return new ContentBlock({\n        key: genKey(),\n        type: 'unordered-list-item',\n        characterList: new List(Repeat(CharacterMetadata.create(), word.length)),\n        text: word\n      });\n    });\n    this.setState({\n      editorState: EditorState.createWithContent(ContentState.createFromBlockArray(contentBlocksArray))\n    }, () => {\n      this.moveSelectionToEnd()\n    });\n  }\n\n  // accepts input as = [\"hello\",\"how\",\"are\",\"you\"]\n  addList = (input) => {\n    let contentBlocksArray = input.map(word => {\n      return new ContentBlock({\n        key: genKey(),\n        type: 'unstyled',\n        characterList: new List(Repeat(CharacterMetadata.create(), word.length)),\n        text: word\n      });\n    });\n    this.setState({\n      editorState: EditorState.createWithContent(ContentState.createFromBlockArray(contentBlocksArray))\n    }, () => {\n      this.moveSelectionToEnd()\n    });\n  }\n\n  // accepts input as = \"<li>hello</li>\"\n  addBullet(bulletsHTML) {\n    const editorState = this.state.editorState;\n    const newBlockMap = convertFromHTML(bulletsHTML);\n    const contentState = editorState.getCurrentContent();\n    const selectionState = editorState.getSelection();\n    const key = selectionState.getAnchorKey();\n\n    const blocksAfter = contentState.getBlockMap().skipUntil(function (_, k) {\n      return k === key;\n    }).skip(1).toArray();\n    const blocksBefore = contentState.getBlockMap().takeUntil(function (_, k) {\n      return k === key;\n    }).toArray();\n\n    newBlockMap.contentBlocks =\n      blocksBefore\n        .concat([contentState.getBlockForKey(key)])\n        .concat(newBlockMap.contentBlocks)\n        .concat(blocksAfter);\n\n    const newContentState =\n      ContentState.createFromBlockArray(newBlockMap, newBlockMap.entityMap);\n    const newEditorState = EditorState.createWithContent(newContentState);\n\n    this.setState({ editorState: newEditorState }, () => {\n      this.moveSelectionToEnd()\n    });\n  }\n\n  handleKeyCommand = (command) => {\n    const newState = RichUtils.handleKeyCommand(this.state.editorState, command);\n\n    if (newState) {\n      this.onChange(newState);\n      return 'handled';\n    }\n\n    return 'not-handled';\n  }\n\n  getEditorState = () => {\n    return this.state.editorState\n  }\n\n  onUnderlineClick = () => {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'UNDERLINE'));\n    window.ReactNativeWebView && window.ReactNativeWebView.postMessage(JSON.stringify({ action: 'UNDERLINE' }));\n  }\n\n  onBoldClick = () => {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, \"BOLD\"));\n    window.ReactNativeWebView && window.ReactNativeWebView.postMessage(JSON.stringify({ action: 'BOLD' }));\n  };\n\n  onItalicClick = () => {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, \"ITALIC\"));\n    window.ReactNativeWebView && window.ReactNativeWebView.postMessage(JSON.stringify({ action: 'ITALIC' }));\n  };\n\n  toggleBulletPoints = () => {\n    this.onChange(RichUtils.toggleBlockType(this.state.editorState, 'unordered-list-item'))\n    window.ReactNativeWebView && window.ReactNativeWebView.postMessage(JSON.stringify({ action: 'unordered-list-item' }));\n  }\n\n  handlePastedText = () => {\n    window.ReactNativeWebView && window.ReactNativeWebView.postMessage(JSON.stringify({ action: 'handlePastedText' }));\n  }\n\n  onBlur = () => {\n    document.activeElement.blur();\n  }\n\n  moveSelectionToEnd = () => {\n    this.setState({\n      editorState: EditorState.moveSelectionToEnd(this.state.editorState),\n    });\n  }\n\n  focusManually = () => {\n    this.editorRef.current.focus()\n  }\n\n  shouldHidePlaceholder = () => {\n    const contentState = this.state.editorState.getCurrentContent();\n    return (\n      contentState.hasText() ||\n      contentState\n        .getBlockMap()\n        .first()\n        .getType() !== 'unstyled'\n    );\n  }\n\n  render() {\n    this.shouldHidePlaceholder()\n    return (\n      <div style={{ marginLeft: 10, marginRight: 10 }}>\n        <Editor\n          ref={this.editorRef}\n          editorState={this.state.editorState}\n          handleKeyCommand={this.handleKeyCommand}\n          onChange={this.onChange}\n          handlePastedText={() => { this.handlePastedText() }}\n          placeholder={this.shouldHidePlaceholder() ? undefined : this.state.placeholder}\n        />\n      </div >\n    )\n  }\n}\n\nReactDOM.render(\n  <App ref={(appComponent) => { window.appComponent = appComponent }} />,\n  document.getElementById('root')\n);\n","/Users/itsupport/Documents/projects/react-web/my-app/src/reportWebVitals.js",[],["14","15"],{"ruleId":"16","severity":1,"message":"17","line":6,"column":42,"nodeType":"18","messageId":"19","endLine":6,"endColumn":54},{"ruleId":"16","severity":1,"message":"20","line":6,"column":56,"nodeType":"18","messageId":"19","endLine":6,"endColumn":70},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","replacedBy":"24"},"no-unused-vars","'convertToRaw' is defined but never used.","Identifier","unusedVar","'SelectionState' is defined but never used.","no-native-reassign",["25"],"no-negated-in-lhs",["26"],"no-global-assign","no-unsafe-negation"]